package textwidth

import (
	"testing"

	"github.com/neeharvi/textwidth"
)

// test cases copied from https://github.com/mattn/go-runewidth/raw/master/runewidth_test.go

var stringwidthtests = []struct {
	in    string
	out   int
	eaout int
}{
	{"‚ñ†„à±„ÅÆ‰∏ñÁïå‚ë†", 10, 12},
	{"„Çπ„Çø„Éº‚òÜ", 7, 8},
	{"„Å§„ÅÆ„Å†‚òÜHIRO", 11, 12},
}

func TestStringWidth(t *testing.T) {
	for _, tt := range stringwidthtests {
		if out := textwidth.WidthString(tt.in); out != tt.out {
			t.Errorf("WidthString(%q) = %d, want %d", tt.in, out, tt.out)
		}
	}
	//c := runewidth.NewCondition()
	//c.EastAsianWidth = false
	//for _, tt := range stringwidthtests {
	//	if out := c.StringWidth(tt.in); out != tt.out {
	//		t.Errorf("StringWidth(%q) = %d, want %d", tt.in, out, tt.out)
	//	}
	//}
	//c.EastAsianWidth = true
	//for _, tt := range stringwidthtests {
	//	if out := c.StringWidth(tt.in); out != tt.eaout {
	//		t.Errorf("StringWidth(%q) = %d, want %d (EA)", tt.in, out, tt.eaout)
	//	}
	//}
}

var slicewidthtests = []struct {
	in    []byte
	out   int
	eaout int
}{
	{[]byte("‚ñ†„à±„ÅÆ‰∏ñÁïå‚ë†"), 10, 12},
	{[]byte("„Çπ„Çø„Éº‚òÜ"), 7, 8},
	{[]byte("„Å§„ÅÆ„Å†‚òÜHIRO"), 11, 12},
}

func TestSliceWidth(t *testing.T) {
	for _, tt := range slicewidthtests {
		if out := textwidth.WidthBytes(tt.in); out != tt.out {
			t.Errorf("WidthBytes(%q) = %d, want %d", tt.in, out, tt.out)
		}
	}
}

var runewidthtests = []struct {
	in     rune
	out    int
	eaout  int
	nseout int
}{
	{'‰∏ñ', 2, 2, 2},
	{'Áïå', 2, 2, 2},
	{'ÔΩæ', 1, 1, 1},
	{'ÔΩ∂', 1, 1, 1},
	{'ÔΩ≤', 1, 1, 1},
	{'‚òÜ', 1, 2, 2}, // double width in ambiguous
	{'‚ò∫', 1, 1, 2},
	{'‚òª', 1, 1, 2},
	{'‚ô•', 1, 2, 2},
	{'‚ô¶', 1, 1, 2},
	{'‚ô£', 1, 2, 2},
	{'‚ô†', 1, 2, 2},
	{'‚ôÇ', 1, 2, 2},
	{'‚ôÄ', 1, 2, 2},
	{'‚ô™', 1, 2, 2},
	{'‚ô´', 1, 1, 2},
	{'‚òº', 1, 1, 2},
	{'‚Üï', 1, 2, 2},
	{'‚Äº', 1, 1, 2},
	{'‚Üî', 1, 2, 2},
	{'\x00', 0, 0, 0},
	{'\x01', 0, 0, 0},
	{'\u0300', 0, 0, 0},
	{'\u2028', 0, 0, 0},
	{'\u2029', 0, 0, 0},
	{'a', 1, 1, 1}, // ASCII classified as "na" (narrow)
	{'‚ü¶', 1, 1, 1}, // non-ASCII classified as "na" (narrow)
	{'üëÅ', 1, 1, 2},
}

func TestRuneWidth(t *testing.T) {
	for i, tt := range runewidthtests {
		if out := textwidth.WidthRune(tt.in); out != tt.out {
			t.Errorf("case %d: WidthRune(%q) = %d, want %d", i, tt.in, out, tt.out)
		}
	}
	//c := runewidth.NewCondition()
	//c.EastAsianWidth = false
	//for _, tt := range runewidthtests {
	//	if out := c.RuneWidth(tt.in); out != tt.out {
	//		t.Errorf("RuneWidth(%q) = %d, want %d (EastAsianWidth=false)", tt.in, out, tt.out)
	//	}
	//}
	//c.EastAsianWidth = true
	//for _, tt := range runewidthtests {
	//	if out := c.RuneWidth(tt.in); out != tt.eaout {
	//		t.Errorf("RuneWidth(%q) = %d, want %d (EastAsianWidth=true)", tt.in, out, tt.eaout)
	//	}
	//}
}
